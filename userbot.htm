<!DOCTYPE html>
<html>
<head>
   <meta charset="UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Test WebApps API</title>
   <script src="https://telegram.org/js/telegram-web-app.js"></script>
   <style>
      body {
         color: var(--tg-theme-text-color);
         background: var(--tg-theme-bg-color);
         display: flex;
         flex-direction: column;
         align-items: center;
         font-size: 18px;
      }

      .hint {
         color: var(--tg-theme-hint-color);
      }

      .link {
         color: var(--tg-theme-link-color);
      }

      .button {
         background: var(--tg-theme-button-color);
         color: var(--tg-theme-button-text-color);
         border: none;
         font-size: 18px;
         padding: 10px 20px;
         cursor: pointer;
      }

      .button:not(:last-child) {
         margin-bottom: 20px;
      }

      #usercard {
         text-align: center;
         margin-top: 20px;
      }
   </style>
</head>

<body>
   <div id="usercard"></div>
   <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
   <a class="link" href="https://pegakmop.t.me">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
   <p class="hint">—Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç</p>
   <button id="btn" class="button">–ü–æ–∫–∞–∑–∞—Ç—å/–°–∫—Ä—ã—Ç—å</button>
   <button id="btnED" class="button">–†–∞–∑—Ä–µ—à–∏—Ç—å/–ó–∞–ø—Ä–µ—Ç–∏—Ç—å</button>
</body>

<script>
   let tg = window.Telegram.WebApp;
   tg.expand();
   tg.sendData("some string that we need to send");
   var search = window.location.search;
         const tg_user_id = `${tg.initDataUnsafe.user.id}`
         const url = 'https://api.telegram.org/bot5021692760:AAFP4REQhEq5n_8SD0g0JVxQCb6pIh6b0g4/GetChatMember';
         const data = new URLSearchParams({ chat_id: '-1001699696734', user_id: tg_user_id });
         const options = {
            method: 'POST',
            headers: {
               'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: data.toString()
         };

         fetch(url, options)
            .then(response => response.json())
            .then(data => {
               const status = data.result.status;
               const users = data.result.user.id;
               //alert('–∞–π–¥–∏  ' + users);
               const creator = `${window.location.pathname}?tg_user_id=${tg_user_id}&role=administrator&token=pegakmop`;
               const administrator = `${window.location.pathname}?tg_user_id=${tg_user_id}&role=administrator&token=pegakmop`;
               const member = `${window.location.pathname}?tg_user_id=${tg_user_id}&role=member&token=pegakmop`;
               const left = 'https://t.me/c/1733213073/5075';
               const kick = 'https://t.me/piper_pied/281';
               //let tg = window.Telegram.WebApp;
               switch (status) {
                  case 'creator':
                     //tg.MainButton.setParams({"color": "#ff0000"});
                     tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ —Å–µ–±–µ?üòâ");
                     tg.MainButton.enable();
                     tg.MainButton.show();
                     //window.location.href = creator;
                     break;
                  case 'administrator':
                     tg.MainButton.setParams({"color": "#ff0000"});
                     tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ –∞–¥–º–∏–Ω—É?üòâ");
                     tg.MainButton.enable();
                     tg.MainButton.show();
                     //window.location.href = administrator;
                     break;
                  case 'member':
                     tg.MainButton.setParams({"color": "#ff0000"});
                     tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ —é–∑–µ—Ä—É?üòâ");
                     tg.MainButton.disable();
                     tg.MainButton.show();
                     //window.location.href = member;
                     break;
                  case 'left':
                     tg.MainButton.setParams({"color": "#ff0000"});
                     tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ! –û—Ç–ø–∏—Å–∞–Ω!");
                     tg.MainButton.disable();
                     tg.MainButton.show();
                     //window.location.href = left;
                     break;
                  default:
                     tg.MainButton.setParams({"color": "#ff0000"});
                     tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ! –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!");
                     tg.MainButton.disable();
                     tg.MainButton.show();
                     //window.location.href = kick;
               }
            })
            .catch(error => console.error('Error:', error));

  // let tg = window.Telegram.WebApp;
   tg.expand();

   let btn = document.getElementById("btn");
   btn.addEventListener('click', function(){
      if (tg.MainButton.isVisible){
         tg.MainButton.hide();
      } else {
         tg.MainButton.show();
      }
   });

   let btnED = document.getElementById("btnED");
   btnED.addEventListener('click', function(){
      if (tg.MainButton.isActive){
         tg.MainButton.setParams({"color": "#ff0000"});
         tg.MainButton.setText("–û—Ç–∫–∞–∑–∞–Ω–æ");
         tg.MainButton.disable();
      } else {
         tg.MainButton.setParams({"color": "#000000"});
         tg.MainButton.textColor = "#00ff00";
         tg.MainButton.setText("–î–æ—Å—Ç—É–ø–Ω–æ");
         tg.MainButton.enable();
      }
   });

   Telegram.WebApp.onEvent('mainButtonClicked', function(){
      tg.MainButton.setText("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞");
      tg.sendData("some string that we need to send");
      //const newurl = `${window.location.origin}${window.location.pathname.replace('index', 'kino')}?tg_user_id=${tg.initDataUnsafe.user.id}`;
      const newurl = 'https://q900950b.beget.tech'; //const newurl = `${window.location.origin}${window.location.pathname}?tgX_user_id=${tg.initDataUnsafe.user.id}`
      //alert(newurl);
      tg.MainButton.hide();
      window.location.replace(newurl);
      
   });

   let usercard = document.getElementById("usercard");
   let profName = document.createElement('p');
   profName.innerText = `${tg.initDataUnsafe.user.first_name} ${tg.initDataUnsafe.user.last_name} ${tg.initDataUnsafe.user.username} (${tg.initDataUnsafe.user.language_code})`;
   usercard.appendChild(profName);

   let userid = document.createElement('p');
   userid.innerText = `${tg.initDataUnsafe.user.id}`;
   usercard.appendChild(userid);
</script>

</html>
