<!DOCTYPE html>
<html lang="ru">
<head>
   <meta charset="UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Test public @PiperPiedBot WebApps API</title>
   <script src="https://telegram.org/js/telegram-web-app.js"></script>
   <style>
      body {
         color: var(--tg-theme-text-color);
         background: var(--tg-theme-bg-color);
         display: flex;
         flex-direction: column;
         align-items: center;
         font-size: 18px;
         padding: 20px;
      }

      .hint {
         color: var(--tg-theme-hint-color);
         text-align: center;
      }

      .link {
         color: var(--tg-theme-link-color);
         text-decoration: none;
         font-size: 18px;
         margin: 10px 0;
      }

      .button {
         background: var(--tg-theme-button-color);
         color: var(--tg-theme-button-text-color);
         border: none;
         font-size: 18px;
         padding: 10px 20px;
         cursor: pointer;
         margin-top: 20px;
      }

      #usercard {
         text-align: center;
         margin-top: 20px;
      }
   </style>
</head>

<body>
   <div id="usercard"></div>
   <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
   <a class="link" href="https://t.me/c/1699696734/166">üí≤–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–∞–Ω–∞–ª</a>
   <a class="link" href="https://t.me/c/1733213073/5367">üí≤–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ì—Ä—É–ø–ø–∞</a>
   <a class="link" href="https://t.me/piper_pied/284">üÜì–ü—É–±–ª–∏—á–Ω—ã–π –ö–∞–Ω–∞–ª</a>
   <a class="link" href="https://t.me/piper_pied_discuss/22089">üÜì–ü—É–±–ª–∏—á–Ω–∞—è –ì—Ä—É–ø–ø–∞</a>
   <a class="link" href="https://pegakmop.t.me">‚ö†Ô∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏</a>
   <p class="hint">–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.</p>

   <script>
      document.addEventListener("DOMContentLoaded", () => {
         let tg = window.Telegram.WebApp;
         tg.expand();

         if (!tg.initDataUnsafe.user) {
            alert("–û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            return;
         }

         let user = tg.initDataUnsafe.user;
         let usercard = document.getElementById("usercard");

         let profName = document.createElement('p');
         profName.innerText = `${user.first_name || ''} ${user.last_name || ''} (@${user.username || '–Ω–µ—Ç –∏–º–µ–Ω–∏'})`;
         usercard.appendChild(profName);

         let userid = document.createElement('p');
         userid.innerText = `ID: ${user.id}`;
         usercard.appendChild(userid);

         // –ó–∞–ø—Ä–æ—Å –∫ Telegram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
         const url = 'https://api.telegram.org/bot5021692760:AAFP4REQhEq5n_8SD0g0JVxQCb6pIh6b0g4/GetChatMember';
         const data = new URLSearchParams({
            chat_id: '-1001215664002',
            user_id: user.id
         });

         fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: data.toString()
         })
         .then(response => response.json())
         .then(data => {
            if (!data.ok) {
               console.error('–û—à–∏–±–∫–∞ API Telegram:', data);
               return;
            }

            const status = data.result.status;
            let redirectUrl = '';

            switch (status) {
               case 'creator':
               case 'administrator':
               case 'member':
                  redirectUrl = 'http://q900950b.beget.tech/bot.php';
                  break;
               case 'left':
               case 'kicked':
                  alert('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.');
                  redirectUrl = 'https://t.me/+x-5Kce_5vIU2ZjJi';
                  break;
               default:
                  console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', status);
            }

            if (redirectUrl) {
               setTimeout(() => {
                  window.location.replace(redirectUrl);
               }, 3000);
            }
         })
         .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error));
      });
   </script>
</body>
</html>
